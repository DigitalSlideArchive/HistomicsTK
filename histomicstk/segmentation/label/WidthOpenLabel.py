import numpy as np
import scipy.ndimage.morphology as mp
import scipy.ndimage.measurements as ms

from .CondenseLabel import CondenseLabel


def WidthOpenLabel(Label, Width):
    """Removes thin objects from label image using maximum of distance
    transform values within each object.

    Parameters:
    -----------
    Label : array_like
        A uint32 type label image generated by segmentation methods.
    Width : int
        Width threshold for objects. Objects with fewer than 'Area' pixels will
        be zeroed to merge with background.

    Notes:
    ------
    Objects are assumed to have positive nonzero values. A binary mask is
    generated for each object setting all other objects to the background value
    (0). The maximum chamfered distance transform value of this mask is used
    to represent the object width.

    Returns:
    --------
    Split : array_like
        A uint32 label where objects with pixels < Area are removed.

    See Also:
    ---------
    CondenseLabel, ShuffleLabel, SplitLabel, AreaOpenLabel
    """

    # copy input image
    Thinned = Label.copy()

    # condense label image
    if np.unique(Thinned).size-1 != Thinned.max():
        Thinned = CondenseLabel(Thinned)

    # get locations of objects in initial label image
    Locations = ms.find_objects(Thinned)

    # iterate through objects, calculating distances where needed
    for i in np.arange(1, len(Locations)+1):

        # extract object from label image
        W = Thinned[Locations[i-1]]

        # embed into mask with boundary
        Mask = np.zeros((W.shape[0]+2, W.shape[1]+2), dtype=np.bool)
        Mask[1:-1, 1:-1] = W == i

        # calculate distance transform of mask
        D = mp.distance_transform_cdt(Mask, metric='taxicab')

        # get max distance
        Max = D.max()

        # zero label mask of object 'i'
        if Max < Width:
            W[W == i] = 0

    # condense to fill gaps
    Thinned = CondenseLabel(Thinned)

    return Thinned
