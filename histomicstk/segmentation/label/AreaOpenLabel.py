import numpy as np
import scipy.ndimage.measurements as ms

from .CondenseLabel import CondenseLabel


def AreaOpenLabel(Label, Area):
    """Removes small objects from label image.

    Parameters
    ----------
    Label : array_like
        A uint32 type label image generated by segmentation methods.
    Area : int
        Area threshold for objects. Objects with fewer than 'Area' pixels will
        be zeroed to merge with background.

    Returns
    -------
    Split : array_like
        A uint32 label where objects with pixels < Area are removed.

    Notes
    -----
    Objects are assumed to have positive nonzero values. Label image will be
    condensed during processing.

    See Also
    --------
    histomicstk.segmentation.label.CondenseLabel,
    histomicstk.segmentation.label.ShuffleLabel,
    histomicstk.segmentation.label.SplitLabel,
    histomicstk.segmentation.label.WidthOpenLabel
    """

    # copy input image
    Opened = Label.copy()

    # condense label image
    if np.unique(Opened).size-1 != Opened.max():
        Opened = CondenseLabel(Opened)

    # count pixels in each object
    Counts, Edges = np.histogram(Opened, bins=Opened.max()+1)

    # get locations of objects in initial image
    Locations = ms.find_objects(Opened)

    # iterate through objects, zeroing where needed
    for i in np.arange(1, Counts.size):
        if Counts[i] < Area:

            # extract object from label image
            Template = Opened[Locations[i-1]]

            # label mask of object 'i'
            Template[Template == i] = 0

    # condense to fill gaps
    Opened = CondenseLabel(Opened)

    return Opened
