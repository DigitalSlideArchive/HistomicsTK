import numpy as np

from .condense import condense
from .delete import delete


def delete_overlap(im_label, tile_overlap=128, l=False, r=False, t=False, b=False):
    """
    Deletes objects touching half of the overlap of the image and relabel

    Parameters
    ----------
    im_label : array_like
        A label mask generated by segmentation methods.

    overlap : int, optional
        The overlap size in pixels. Default is 128.

    l : bool, optional
        If True, delete the left overlapping region. Default is False.

    r : bool, optional
        If True, delete the right overlapping region. Default is False.

    t : bool, optional
        If True, delete the top overlapping region. Default is False.

    b : bool, optional
        If True, delete the bottom overlapping region. Default is False.


    Returns
    -------
    im_label_del : array_like
        The modified image label with overlapping regions deleted.

    """
    tile_overlap = int(tile_overlap / 2)
    im_label_del = np.zeros_like(im_label)

    if np.any(im_label):

        im_border_mask = np.zeros_like(im_label)
        im_border_mask[:tile_overlap, :] = int(l)
        im_border_mask[-tile_overlap:, :] = int(r)
        im_border_mask[:, :tile_overlap] = int(t)
        im_border_mask[:, -tile_overlap:] = int(b)

        border_indices = np.unique(im_label[im_border_mask > 0])
        border_indices = border_indices[border_indices > 0]

        if len(border_indices) == 0:
            return im_label

        im_label_del = condense(delete(im_label, border_indices))

    return im_label_del
